name: '[2- Deploy] Continuous Deployment to Kubernetes'

on:
  workflow_dispatch:
    inputs:
      tagVersion:
        description: 'Tag version to be used for the image'
        required: true
      environment:
        type: choice
        description: 'Environment to deploy the image'
        required: true
        options:
          - homologation
          - production

jobs:
  deploy:
    runs-on: [ self-hosted, linux ]
    env:
      APPLICATION_NAME: ${{ secrets.APPLICATION_NAME }} # Assuming this is defined in your secrets or replace with actual value
      TAG_VERSION: ${{ github.event.inputs.tagVersion }}
      ENVIRONMENT: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.tagVersion }}

      - name: Install kubectl
        uses: SGitHubActions/setup-tools@stable
        with:
          tool-kind: 'kubectl'
          distribution: 'kubectl'
          tool-version: '1.24.6'

      - name: Setup dynamic environment variables
        run: |
          if [[ "${{ env.ENVIRONMENT }}" == "homologation" ]]; then
            echo "NAMESPACE=ns-${{ secrets.HOM_DTR_WORKSPACE }}" >> $GITHUB_ENV
            echo "CLUSTER_URL=${{ secrets.KUB9_HOM_CLUSTER_HOST }}" >> $GITHUB_ENV
            echo "DOCKER_USERNAME=${{ secrets.HOM_DOCKER_USERNAME }}" >> $GITHUB_ENV
            echo "DOCKER_PASSWORD=${{ secrets.HOM_DOCKER_PASSWORD }}" >> $GITHUB_ENV
            echo "ENV_PREFIX=hml" >> $GITHUB_ENV
          elif [[ "${{ env.ENVIRONMENT }}" == "production" ]]; then
            echo "NAMESPACE=ns-${{ secrets.PROD_DTR_WORKSPACE }}" >> $GITHUB_ENV
            echo "CLUSTER_URL=${{ secrets.PRD_KUBE9_CLUSTER_URL }}" >> $GITHUB_ENV
            echo "DOCKER_USERNAME=${{ secrets.PROD_DOCKER_USERNAME }}" >> $GITHUB_ENV
            echo "DOCKER_PASSWORD=${{ secrets.PROD_DOCKER_PASSWORD }}" >> $GITHUB_ENV
            echo "ENV_PREFIX=prd" >> $GITHUB_ENV
          fi

      - name: Setup kube config
        uses: SGitHubActions/sgcp-kube-config@stable
        with:
          cluster-url: ${{ env.CLUSTER_URL }}
          service-account-name: ${{ env.DOCKER_USERNAME }}
          service-account-password: ${{ env.DOCKER_PASSWORD }}

      - name: Promot image to production
        if: env.ENVIRONMENT == 'production'
        run: ./acid/scripts/scan_and_promote.sh ${{ secrets.PROD_DOCKER_USERNAME }} ${{ secrets.PROD_DOCKER_PASSWORD }} ${{ vars.KUB9_HOM_DTR_HOST}}/${{ vars.HOM_DTR_WORKSPACE}}/${{ vars.APPLICATION_NAME }}:${{ env.TAG_VERSION }}

      - name: Deploy to environment
        run: |
          kubectl delete deployment --ignore-not-found=true ${{ env.APPLICATION_NAME }}-deployment --namespace ${{ env.NAMESPACE }}
          kubectl apply -f ./acid/K8S/configMaps/${{ env.ENV_PREFIX }}-application-properties-config-map.yaml --namespace ${{ env.NAMESPACE }}
          kubectl apply -f ./acid/K8S/configMaps/${{ env.ENV_PREFIX }}-filebeat-elastic-config-map.yaml --namespace ${{ env.NAMESPACE }}
          kubectl apply -f ./acid/K8S/configMaps/${{ env.ENV_PREFIX }}-filebeat-logstash-y-flux-config-map.yaml --namespace ${{ env.NAMESPACE }}
          sed -i 's/IMAGE_TAG/${{ env.TAG_VERSION }}/g' ./acid/K8S/deployments/${{ env.ENV_PREFIX }}-deployment.yaml
          kubectl apply -f ./acid/K8S/deployments/${{ env.ENV_PREFIX }}-deployment.yaml --namespace ${{ env.NAMESPACE }}
          kubectl apply -f ./acid/K8S/service.yaml --namespace ${{ env.NAMESPACE }}
          kubectl apply -f ./acid/K8S/ingress/${{ env.ENV_PREFIX }}-ingress.yaml --namespace ${{ env.NAMESPACE }}
          kubectl apply -f ./acid/K8S/hpa.yaml --namespace ${{ env.NAMESPACE }}
